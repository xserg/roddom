<?php

namespace Services;

use App\Models\Category;
use App\Repositories\CategoryRepository;
use App\Repositories\LectureRepository;
use App\Repositories\UserRepository;
use App\Services\CategoryService;
use App\Services\PaymentService;
use Mockery;
use Tests\TestCase;

class CategoryServiceTest extends TestCase
{
    private ?int $categoryId;
    private ?int $userId;
    private ?UserRepository $userRepository;
    private ?CategoryRepository $categoryRepository;
    private ?LectureRepository $lectureRepository;
    private ?PaymentService $paymentService;
    private ?Category $category;
    private ?CategoryService $categoryService;

    protected function setUp(): void
    {
        $this->categoryId = rand(1, 9999);
        $this->userId = rand(1, 9999);

        $this->userRepository = Mockery::mock(UserRepository::class);
        $this->categoryRepository = Mockery::mock(CategoryRepository::class);
        $this->lectureRepository = Mockery::mock(LectureRepository::class);
        $this->paymentService = Mockery::mock(PaymentService::class);

        $this->category = Mockery::mock(Category::class);
        $this->categoryService = new CategoryService(
            $this->userRepository,
            $this->categoryRepository,
            $this->lectureRepository,
            $this->paymentService);
        parent::setUp();
    }

    protected function tearDown(): void
    {
        $this->categoryId = null;
        $this->userId = null;

        $this->userRepository = null;
        $this->categoryRepository = null;
        $this->lectureRepository = null;
        $this->paymentService = null;

        $this->category = null;
        $this->service = null;

        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    public function testShouldReturnTrueWhenAllLecturesOfCategoryArePurchased()
    {
        //arrange
        $this->categoryRepository
            ->expects()
            ->getCategoryById($this->categoryId)
            ->andReturns($this->category);

        $this->lectureRepository
            ->expects()
            ->getPurchasedLectures($this->userId);

        $this->category
            ->shouldReceive('areAllLecturesPurchased')
            ->andReturns(true)
            ->once();

        //act
        $result = $this->categoryService->areAllCategoryLecturesPurchased($this->categoryId, $this->userId);

        //assert
        $this->assertTrue($result);
    }

    public function testShouldReturnFalseWhenNotAllLecturesOfCategoryArePurchased()
    {
        //arrange
        $this->categoryRepository
            ->expects()
            ->getCategoryById($this->categoryId)
            ->andReturns($this->category);

        $this->lectureRepository
            ->expects()
            ->getPurchasedLectures($this->userId);

        $this->category
            ->shouldReceive('areAllLecturesPurchased')
            ->andReturns(false)
            ->once();

        //act
        $result = $this->categoryService->areAllCategoryLecturesPurchased($this->categoryId, $this->userId);

        //assert
        $this->assertFalse($result);
    }
}
