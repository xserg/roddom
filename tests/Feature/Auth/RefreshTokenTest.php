<?php

namespace Auth;

use App\Exceptions\Custom\RefreshTokenIsExpired;
use App\Models\RefreshToken;
use App\Models\User;
use Illuminate\Testing\Fluent\AssertableJson;
use Laravel\Sanctum\PersonalAccessToken;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class RefreshTokenTest extends TestCase
{
    private ?User $user = null;
    private ?PersonalAccessToken $accessToken = null;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->accessToken = $this->user->createToken('default_token_name')->accessToken;
    }

    public function testSuccess()
    {
        $refreshToken = RefreshToken::factory()
            ->withAccessToken($this->accessToken->id)
            ->create();

        $response = $this->postJson(route('v1.login.refresh'), [
            'refresh_token' => $refreshToken->token,
        ]);

        $response
            ->assertStatus(Response::HTTP_OK)
            ->assertJson(function (AssertableJson $json) {
                $json->hasAll(['access_token', 'refresh_token']);
            });
    }

    public function testExpired()
    {
        $expiredRefreshToken = RefreshToken::factory()
            ->withAccessToken($this->accessToken->id)
            ->withExpiresAt(now()->subMinute())
            ->create();

        $this->withoutExceptionHandling();
        $this->expectException(RefreshTokenIsExpired::class);
        $this->expectExceptionCode(Response::HTTP_UNAUTHORIZED);
        $this->expectExceptionMessage('Given refresh code is expired');

        $this->postJson(route('v1.login.refresh'), [
            'refresh_token' => $expiredRefreshToken->token,
        ])->assertStatus(Response::HTTP_UNAUTHORIZED);
    }

    public function testInvalid()
    {
        $invalidRefreshToken = 'invalid-code';

        $response = $this->postJson(route('v1.login.refresh'), [
            'refresh_token' => $invalidRefreshToken,
        ]);

        $response
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function testUsedTokensRemoved()
    {
        $refreshToken = RefreshToken::factory()
            ->withAccessToken($this->accessToken->id)
            ->create();

        $this->postJson(route('v1.login.refresh'), [
            'refresh_token' => $refreshToken->token,
        ]);

        $this->assertNull(RefreshToken::find($refreshToken?->id));
        $this->assertNull(PersonalAccessToken::find($refreshToken?->accessToken?->id));
        $this->assertNull(PersonalAccessToken::find($this->accessToken?->id));
    }
}
